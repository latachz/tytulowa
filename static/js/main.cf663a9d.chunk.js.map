{"version":3,"sources":["hooks/useCanvas.js","App.js","serviceWorker.js","index.js"],"names":["useCanvas","canvasRef","name","klasa","useEffect","canvas","current","ctx","getContext","logo","Image","src","width","height","fillStyle","fillRect","onload","drawImage","font","fillText","textAlign","ratio","window","screen","availWidth","style","App","useState","setName","setKlasa","useRef","handleName","_","debounce","input","handleKlasa","className","ref","placeholder","onChange","e","target","value","href","onClick","img","toDataURL","download","toLowerCase","replace","alt","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"yNA2DeA,EAzDG,SAACC,EAAWC,EAAMC,GACnCC,qBAAU,WACT,IAAMC,EAASJ,EAAUK,QACnBC,EAAMF,EAAOG,WAAW,MAE1BC,EAAO,IAAIC,MACfD,EAAKE,IAAM,qBAEXN,EAAOO,MAAQ,IACfP,EAAOQ,OAAS,IAEhBN,EAAIO,UAAY,UAChBP,EAAIQ,SAAS,EAAG,EAAGR,EAAIF,OAAOO,MAAOL,EAAIF,OAAOQ,QAEhDN,EAAIO,UAAY,UAChBP,EAAIQ,SAAS,EAAGR,EAAIF,OAAOQ,OAAS,IAAKN,EAAIF,OAAOO,MAAO,KAE3DH,EAAKO,OAAS,WACbT,EAAIU,UAAUR,EAAM,GAAIF,EAAIF,OAAOQ,OAAS,IAAK,IAAK,MAGvDN,EAAIO,UAAY,UAEhBP,EAAIW,KAAO,sBACXX,EAAIY,SAAS,2CAA4B,IAAKZ,EAAIF,OAAOQ,OAAS,KAElEN,EAAIW,KAAO,sBACXX,EAAIY,SACH,uCACA,IACAZ,EAAIF,OAAOQ,OAAS,IAGrBN,EAAIa,UAAY,SAEhBb,EAAIW,KAAO,sBACXX,EAAIY,SAAS,YAAaZ,EAAIF,OAAOO,MAAQ,EAAG,KAEhDL,EAAIW,KAAO,sBACXX,EAAIY,SAAS,wBAAyBZ,EAAIF,OAAOO,MAAQ,EAAG,KAE5DL,EAAIW,KAAO,sBACXX,EAAIY,SAASjB,EAAMK,EAAIF,OAAOO,MAAQ,EAAG,KAEzCL,EAAIW,KAAO,sBACXX,EAAIY,SAAJ,gBAAsBhB,GAASI,EAAIF,OAAOO,MAAQ,EAAG,KAErD,IAAMS,EACLC,OAAOC,OAAOC,WAAa,IACxB,EACAF,OAAOC,OAAOC,WAAanB,EAAOO,MAAQ,KAE9CP,EAAOoB,MAAMb,MAAQP,EAAOO,MAAQS,EAAQ,KAC5ChB,EAAOoB,MAAMZ,OAASR,EAAOQ,OAASQ,EAAQ,OAC5C,CAACpB,EAAWC,EAAMC,K,MCUPuB,MA7Df,WAAgB,IAAD,EACUC,mBAAS,gBADnB,mBACPzB,EADO,KACD0B,EADC,OAEYD,mBAAS,MAFrB,mBAEPxB,EAFO,KAEA0B,EAFA,KAIR5B,EAAY6B,iBAAO,MAEzB9B,EAAUC,EAAWC,EAAMC,GAE3B,IAMM4B,EAAaD,iBAClBE,IAAEC,UAAS,SAACC,GACX,IAAKA,EAAO,OAAON,EAAQ,gBAC3BA,EAAQM,KACN,MACF5B,QAEI6B,EAAcL,iBACnBE,IAAEC,UAAS,SAACC,GACX,IAAKA,EAAO,OAAOL,EAAS,MAC5BA,EAASK,KACP,MACF5B,QAEF,OACC,oCACC,yBAAK8B,UAAU,aACd,4BAAQC,IAAKpC,IACb,2BACCqC,YAAY,uBACZC,SAAU,SAACC,GAAD,OAAOT,EAAWS,EAAEC,OAAOC,UAEtC,2BACCJ,YAAY,QACZC,SAAU,SAACC,GAAD,OAAOL,EAAYK,EAAEC,OAAOC,UAEvC,uBACCC,KAAK,YACLC,QAlCS,SAACJ,GACb,IAAMK,EAAM5C,EAAUK,QAAQwC,UAAU,aAExCN,EAAEC,OAAOE,KAAOE,GAgCbE,SAAQ,UAAK7C,EACX8C,cACAC,QAAQ,KAAM,KAFR,YAEgB9C,EAAM6C,cAFtB,SAHT,WAUD,gCACC,uBAAGL,KAAK,0CACP,yBAAKO,IAAI,qBAAqBvC,IAAI,qCAEnC,6BAJD,WAKS,uBAAGgC,KAAK,mBAAR,WChDNQ,EAAcC,QACW,cAA7B9B,OAAO+B,SAASC,UAEe,UAA7BhC,OAAO+B,SAASC,UAEhBhC,OAAO+B,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC1FjEC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDYlB,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,YAAwB5D,OAAO+B,SAASV,MACpDwC,SAAW7D,OAAO+B,SAAS8B,OAIvC,OAGF7D,OAAO8D,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMyB,YAAN,sBAEP/B,IAgEV,SAAiCM,EAAOC,GAEtC2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BxB,MAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,MAAK,WAC7BxC,OAAO+B,SAASyC,eAKpBtC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAwB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OClC/BE,I","file":"static/js/main.cf663a9d.chunk.js","sourcesContent":["import { useEffect } from \"react\";\r\n\r\nconst useCanvas = (canvasRef, name, klasa) => {\r\n\tuseEffect(() => {\r\n\t\tconst canvas = canvasRef.current;\r\n\t\tconst ctx = canvas.getContext(\"2d\");\r\n\r\n\t\tlet logo = new Image();\r\n\t\tlogo.src = \"/tytulowa/logo.png\";\r\n\r\n\t\tcanvas.width = 800;\r\n\t\tcanvas.height = 500;\r\n\r\n\t\tctx.fillStyle = \"#ca4b4b\";\r\n\t\tctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n\r\n\t\tctx.fillStyle = \"#9c2b2b\";\r\n\t\tctx.fillRect(0, ctx.canvas.height - 100, ctx.canvas.width, 100);\r\n\r\n\t\tlogo.onload = () => {\r\n\t\t\tctx.drawImage(logo, 55, ctx.canvas.height - 150, 100, 100);\r\n\t\t};\r\n\r\n\t\tctx.fillStyle = \"#ffffff\";\r\n\r\n\t\tctx.font = \"700 36px Montserrat\";\r\n\t\tctx.fillText(\"Zespół Szkół Komunikacji\", 175, ctx.canvas.height - 110);\r\n\r\n\t\tctx.font = \"400 24px Montserrat\";\r\n\t\tctx.fillText(\r\n\t\t\t\"im. Hipolita Cegielskiego w Poznaniu\",\r\n\t\t\t175,\r\n\t\t\tctx.canvas.height - 75\r\n\t\t);\r\n\r\n\t\tctx.textAlign = \"center\";\r\n\r\n\t\tctx.font = \"700 48px Montserrat\";\r\n\t\tctx.fillText(\"Geografia\", ctx.canvas.width / 2, 100);\r\n\r\n\t\tctx.font = \"700 32px Montserrat\";\r\n\t\tctx.fillText(\"Technikum Komunikacji\", ctx.canvas.width / 2, 150);\r\n\r\n\t\tctx.font = \"400 42px Montserrat\";\r\n\t\tctx.fillText(name, ctx.canvas.width / 2, 250);\r\n\r\n\t\tctx.font = \"400 30px Montserrat\";\r\n\t\tctx.fillText(`Klasa ${klasa}`, ctx.canvas.width / 2, 285);\r\n\r\n\t\tconst ratio =\r\n\t\t\twindow.screen.availWidth > 800\r\n\t\t\t\t? 1\r\n\t\t\t\t: window.screen.availWidth / canvas.width / 1.05;\r\n\r\n\t\tcanvas.style.width = canvas.width * ratio + \"px\";\r\n\t\tcanvas.style.height = canvas.height * ratio + \"px\";\r\n\t}, [canvasRef, name, klasa]);\r\n};\r\n\r\nexport default useCanvas;\r\n","import React, { useState, useRef } from \"react\";\nimport _ from \"lodash\";\nimport useCanvas from \"./hooks/useCanvas\";\nimport \"./App.css\";\n\nfunction App() {\n\tconst [name, setName] = useState(\"Jan Kowalski\");\n\tconst [klasa, setKlasa] = useState(\"1X\");\n\n\tconst canvasRef = useRef(null);\n\n\tuseCanvas(canvasRef, name, klasa);\n\n\tconst save = (e) => {\n\t\tconst img = canvasRef.current.toDataURL(\"image/png\");\n\n\t\te.target.href = img;\n\t};\n\n\tconst handleName = useRef(\n\t\t_.debounce((input) => {\n\t\t\tif (!input) return setName(\"Jan Kowalski\");\n\t\t\tsetName(input);\n\t\t}, 500)\n\t).current;\n\n\tconst handleKlasa = useRef(\n\t\t_.debounce((input) => {\n\t\t\tif (!input) return setKlasa(\"1X\");\n\t\t\tsetKlasa(input);\n\t\t}, 500)\n\t).current;\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"container\">\n\t\t\t\t<canvas ref={canvasRef} />\n\t\t\t\t<input\n\t\t\t\t\tplaceholder=\"Imię i Nazwisko\"\n\t\t\t\t\tonChange={(e) => handleName(e.target.value)}\n\t\t\t\t/>\n\t\t\t\t<input\n\t\t\t\t\tplaceholder=\"Klasa\"\n\t\t\t\t\tonChange={(e) => handleKlasa(e.target.value)}\n\t\t\t\t/>\n\t\t\t\t<a\n\t\t\t\t\thref=\"/tytulowa\"\n\t\t\t\t\tonClick={save}\n\t\t\t\t\tdownload={`${name\n\t\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t\t.replace(/ /g, \"-\")}-${klasa.toLowerCase()}.png`}\n\t\t\t\t>\n\t\t\t\t\tZapisz\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t\t<footer>\n\t\t\t\t<a href=\"https://github.com/zsk-poznan/tytulowa\">\n\t\t\t\t\t<img alt=\"GitHub Source Code\" src=\"https://i.imgur.com/3PbBdr2.png\" />\n\t\t\t\t</a>\n\t\t\t\t<br />\n\t\t\t\tMade by <a href=\"https://ejer.ga\">ejer</a>\n\t\t\t</footer>\n\t\t</>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}